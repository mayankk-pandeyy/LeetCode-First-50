Code 1 - 'Boyer Moore Majority Voting'
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int element1 = INT_MIN;
        int counter1 = 0;
        int element2 = INT_MIN;
        int counter2 = 0;
        vector<int> ans;
        for(int i=0; i<nums.size(); i++){
            if(counter1 == 0 && nums[i] != element2){
                element1 = nums[i];
                counter1 = 1;
            }else if(counter2 == 0 && nums[i] != element1){
                element2 = nums[i];
                counter2 = 1;
            }else if(element1 == nums[i]){
                counter1++;
            }else if(element2 == nums[i]){
                counter2++;
            }else{
                counter1--;
                counter2--;
            }
        }
        counter1 = 0;
        counter2 = 0;
        for(int i=0; i<nums.size(); i++){
            if(element1 == nums[i]){
                counter1++;
            }else if(element2 == nums[i]){
                counter2++;
            }
        }
        int reqCount = (nums.size())/3 + 1;
        if(counter1 >= reqCount){
            ans.push_back(element1);
        }
        if(counter2 >= reqCount){
            ans.push_back(element2);
        }
        return ans;
    }
};

-------------------------------------------------------------------------------------



Code 2 - 'Hashmaps'
Time complexity: O(N)
Space complexity: O(N)
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        int reqCount = n/3;
        vector<int> ans;
        unordered_map<int, int> map;
        for(int i=0; i<n; i++){
            map[nums[i]]++;
        }
        for(auto i : map){
            if(i.second > reqCount){
                ans.push_back(i.first);
            }
        }
        return ans;
    }
};
