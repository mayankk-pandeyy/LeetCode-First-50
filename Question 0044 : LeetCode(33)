class Solution {
public:
    int findPivotIndex(vector<int> & nums){
        int start = 0;
        int end = nums.size()-1;
        while(start <= end){
            int mid = start + (end - start)/2;
            if(start == end){
                return start;
            }else if(nums[mid]>nums[mid+1]){
                return mid;
            }else if(mid-1 >= 0 && nums[mid] < nums[mid-1]){
                return mid-1;
            }else if(nums[0] > nums[mid]){
                end = mid - 1;
            }else{
                start = mid +1;
            }
        }
        return -1;
    }

    int binarySearch(vector<int> arr, int start, int end, int target){
        while(start <= end){
            int mid = start + (end - start)/2;
            if(arr[mid]==target){
                return mid;
            }
            if(arr[mid]>target){
                end = mid-1;
            }else{
                start = mid + 1;
            }
        }
        return -1;
    }

    
    int search(vector<int>& nums, int target) {
        int pivotIndex = findPivotIndex(nums);
        int pivotElement = nums[pivotIndex];
        int ans = -1;

        if(target >= nums[0] && target <= pivotElement){
            ans = binarySearch(nums,0,pivotIndex, target);
        }else{
            ans = binarySearch(nums, pivotIndex+1, nums.size()-1, target);
        }
        return ans;
    }
};
